Primer sa nasleđivanjem
Kreirati WindowsFormsApplication kao na slici.
Definisati klasu Artikal koja ima sledeće privatne atribute (polja), pa je potrebno za svaki kreirati Get i Set svojstva:
proizvodjac-naziv proizvođača artikla; 
nabavnaCena- nabavna cena u dinarima;
kolicina-količina nabavljenih proizvoda;
Apstraktnu javnu metodu IzracunajProdajnuCenu sa argumentom prodataKolicina
Definisati izvedene klase koje nasleđuju klasu Artikal: 
1.	Secer-koja sadrži metodu IzracunajProdajnuCenu  koja se dobija kada se nabavna cena uveća za 10%
2.	Cokolada - koja sadrži metodu IzracunajProdajnuCenu  koja se dobija kada se nabavna cena uveća za 10% ukoliko je prodata količina veća od 100 u svim ostalim slučajevima se uvećava za 20%.
3.	So - koja sadrži metodu IzracunajProdajnuCenu  koja se dobija kada se nabavna cena uveća za 20% ukoliko je prodata količina veća od 200 u svim ostalim slučajevima se uvećava za 30%.
4.	Kafa - koja sadrži metodu IzracunajProdajnuCenu  koja se dobija kada se nabavna cena uveća za 20% ukoliko je prodata količina veća od 300 u svim ostalim slučajevima se uvećava za 25%.
Kreirati događaj za:
Nabavku-koji upisuje vrednosti atributa u niz, koje korisnk unosi sa tastature i izračunava se ukupna količina izabranog artikla (za svaki artikal se posebno računa) po obrascu:
ukupno=nabavnaCena*kolicina;
Takođe se ispisuje u labelu Ukupna vrednost robe u magacinu kolika je trenutna vrednost robe u magacinu.
Kreirati događaj za:
Prodaju - koji upisuje vrednosti atributa u niz, koje korisnk unosi sa tastature i umanjuje se ukupna vrednost i količina izabranog artikla (za svaki artikal se posebno računa). Ispisati u labelu Ostvaren prihod, koliki je trenutno ostvaren prihod od prodaje proizvoda.
Kreirati događaj za:
Stanje u magacinu – kojim se ispisuje listBox kontroli trenutno stanje svakog artikla u magacinu.

 
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace WindowsFormsApplication1
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        /*Početak pisanja koda aplikacije i definisanje osnovne i izvedenih klasa*/
        public abstract class Artikal
        {
            private double nabavnaCena;
            private double kolicina;
            private string proizvodjac;

            public double GetSetNabavnaCena
            {
                get { return nabavnaCena; }
                set { nabavnaCena = value; }

            }

            public double GetSetKolicina
            {
                get { return kolicina; }
                set { kolicina = value; }
            }

            public string GetSetProizvodjac
            {
                get { return proizvodjac; }
                set { proizvodjac = value; }
            }
            /*Definicija abstraktne metode IzracunajProdajnuCenu()*/
            abstract public double IzracunajProdajnuCenu(double prodataKolicina);

        }
        /*Definisanje izvedenih klasa*/
        public class Secer : Artikal
        {
            /*Nasleđena abstraktna metoda*/
            public override double IzracunajProdajnuCenu(double prodataKolicina)
            {

                return GetSetNabavnaCena * 1.1;
            }
        }
        public class Cokolada : Artikal
        {
            public override double IzracunajProdajnuCenu(double prodataKolicina)
            {
                double cena = GetSetNabavnaCena;
                if (prodataKolicina > 100)
                    cena = cena * 1.1;
                else
                    cena = cena * 1.2;
                return cena;
            }
        }
        public class So : Artikal
        {
            public override double IzracunajProdajnuCenu(double prodataKolicina)
            {
                double cena = GetSetNabavnaCena;
                if (prodataKolicina > 200)
                    cena = cena * 1.2;
                else
                    cena = cena * 1.3;
                return cena;
            }
        }
        public class Kafa : Artikal
        {
            public override double IzracunajProdajnuCenu(double prodataKolicina)
            {
                double cena = GetSetNabavnaCena;
                if (prodataKolicina > 300)
                    cena = cena * 1.2;
                else
                    cena = cena * 1.25;
                return cena;
            }
        };

        /*Deklaracije neophodnih promenljivih i nizova objekata*/
        int i, ik = 0, ise = 0, ico = 0, iso = 0;
        Kafa[] nizk = new Kafa[10];
        Secer[] nizse = new Secer[10];
        Cokolada[] nizco = new Cokolada[10];
        So[] nizso = new So[10];
        double ukupno = 0.0, ukupnoKafa = 0.0, ukupnoSecer = 0.0, ukupnoSo = 0.0, ukupnoCokolada = 0.0;
        double razlika = 0;

        /*Kreiranje događaja za button Nabavka*/
        private void buttonNabavka_Click(object sender, EventArgs e)
        {
            /*Ispitujemo da li je izabrn artikal Kafa i svojstva GetSet se inicijalizuju unetim vrednostima. 
             Promenljiva ukupnoKafa izračunava ukupnu vrednost kafe u magacinu.*/
            if ((radioButtonKafa.Checked == true) && (ik < 10))
            {
                nizk[ik] = new Kafa();
                nizk[ik].GetSetNabavnaCena = Convert.ToDouble(textBoxCena.Text);
                nizk[ik].GetSetKolicina = Convert.ToDouble(textBoxKolicina.Text);
                nizk[ik].GetSetProizvodjac = textBoxProizvodjac.Text;
                ukupnoKafa += nizk[ik].GetSetNabavnaCena * nizk[ik].GetSetKolicina;
                ik++;/*indeks svakog objekta klase kafa (brojač vrsta kafa)*/
            }

            else if ((radioButtonSecer.Checked == true) && (ise < 10))
            {
                nizse[ise] = new Secer();
                nizse[ise].GetSetNabavnaCena = Convert.ToDouble(textBoxCena.Text);
                nizse[ise].GetSetKolicina = Convert.ToDouble(textBoxKolicina.Text);
                nizse[ise].GetSetProizvodjac = textBoxProizvodjac.Text;
                ukupnoSecer += nizse[ise].GetSetNabavnaCena * nizse[ise].GetSetKolicina;
                ise++;
            }
            else if ((radioButtonCokolada.Checked == true) && (ico < 10))
            {
                nizco[ico] = new Cokolada();
                nizco[ico].GetSetNabavnaCena = Convert.ToDouble(textBoxCena.Text);
                nizco[ico].GetSetKolicina = Convert.ToDouble(textBoxKolicina.Text);
                nizco[ico].GetSetProizvodjac = textBoxProizvodjac.Text;
                ukupnoCokolada += nizco[ico].GetSetNabavnaCena * nizco[ico].GetSetKolicina;
                ico++;
            }
            else if ((radioButtonSo.Checked == true) && (iso < 10))
            {
                nizso[iso] = new So();
                nizso[iso].GetSetNabavnaCena = Convert.ToDouble(textBoxCena.Text);
                nizso[iso].GetSetKolicina = Convert.ToDouble(textBoxKolicina.Text);
                nizso[iso].GetSetProizvodjac = textBoxProizvodjac.Text;
                ukupnoSo += nizso[iso].GetSetNabavnaCena * nizso[iso].GetSetKolicina;
                iso++;
            }
            else
                Application.Exit(); /*Izlaz iz aplikacije*/
            ukupno = ukupnoKafa + ukupnoCokolada + ukupnoSecer + ukupnoSo;/*Ukupna vrednost svih proizvoda u magacinu*/
            labelUkupno.Text = Convert.ToString(ukupno);/*Ispis ukupne vrednosti u labelUkupno*/
        }

        /*Kreiranje događaja za button Prodaja*/
        private void buttonProdaja_Click(object sender, EventArgs e)
        {
            /*Ispitujemo da li je selektovan artikal Kafa i ukoliko jeste ispitujemo da li postoji uneti prozvođač u magacinu.
             Ako postoji izračunava se prihod od prodaje proizvoda (promenljiva razlika) i smanjuje se ukupna vrednost artikala u magacinu.*/
            if ((radioButtonKafa.Checked == true) && (ik < 10))
            {
                for (i = 0; i < ik; i++)
                    if (String.Equals(nizk[i].GetSetProizvodjac, textBoxProizvodjac.Text) == true)
                    {
                        double prodataKolicina = Convert.ToDouble(textBoxKolicina.Text);
                        razlika += (nizk[i].IzracunajProdajnuCenu(prodataKolicina) - nizk[i].GetSetNabavnaCena) * prodataKolicina;
                        ukupnoKafa -= nizk[i].GetSetNabavnaCena * prodataKolicina;
                        nizk[i].GetSetKolicina -= prodataKolicina; /*Umanjenje količine kafe za prodatu količinu*/
                        labelRazlika.Text = Convert.ToString(razlika);/*Ispis ostvarenog prihoda u labelRazlika*/
                    }
            }

            else if ((radioButtonSecer.Checked == true) && (ise < 10))
            {
                for (i = 0; i < ise; i++)
                    if (String.Equals(nizse[i].GetSetProizvodjac, textBoxProizvodjac.Text) == true)
                    {
                        double prodataKolicina = Convert.ToDouble(textBoxKolicina.Text);
                        razlika += (nizse[i].IzracunajProdajnuCenu(prodataKolicina) - nizse[i].GetSetNabavnaCena) * prodataKolicina;
                        ukupnoSecer -= nizse[i].GetSetNabavnaCena * prodataKolicina;
                        nizse[i].GetSetKolicina -= prodataKolicina;
                        labelRazlika.Text = Convert.ToString(razlika);
                    }
            }
            else if ((radioButtonCokolada.Checked == true) && (ico < 10))
            {
                for (i = 0; i < ico; i++)
                    if (String.Equals(nizco[i].GetSetProizvodjac, textBoxProizvodjac.Text) == true)
                    {
                        double prodataKolicina = Convert.ToDouble(textBoxKolicina.Text);
                        razlika += (nizco[i].IzracunajProdajnuCenu(prodataKolicina) - nizco[i].GetSetNabavnaCena) * prodataKolicina;
                        ukupnoCokolada -= nizco[i].GetSetNabavnaCena * prodataKolicina;
                        nizco[i].GetSetKolicina -= prodataKolicina;
                        labelRazlika.Text = Convert.ToString(razlika);
                    }
            }
            else if ((radioButtonSo.Checked == true) && (iso < 10))
            {
                for (i = 0; i < iso; i++)
                    if (String.Equals(nizso[i].GetSetProizvodjac, textBoxProizvodjac.Text) == true)
                    {
                        double prodataKolicina = Convert.ToDouble(textBoxKolicina.Text);
                        razlika += (nizso[i].IzracunajProdajnuCenu(prodataKolicina) - nizso[i].GetSetNabavnaCena) * prodataKolicina;
                        ukupnoSo -= nizso[i].GetSetNabavnaCena * prodataKolicina;
                        nizso[i].GetSetKolicina -= prodataKolicina;
                        labelRazlika.Text = Convert.ToString(razlika);
                    }
            }
            else
                Application.Exit();
            ukupno = ukupnoKafa + ukupnoCokolada + ukupnoSecer + ukupnoSo;/*Ažuriranje ukupne vrednosti artikala u magacinu*/
            labelUkupno.Text = Convert.ToString(ukupno);/*Ispis ukupne vrednosti*/
            labelRazlika.Text = Convert.ToString(razlika);/*Ispis ostvarenog prihoda*/
        }

        /*Definisanje metode ispis koja se koristi za ispis svakog artikla u listBox kontroli*/
        public void ispis(Artikal[] niz, int n)
        {
            int i;
            for (i = 0; i < n; i++)
            {
                StanjeMagacina.Items.Add("Kafa: " + niz[i].GetSetProizvodjac);
                StanjeMagacina.Items.Add("Cena (din): " + niz[i].GetSetNabavnaCena);
                StanjeMagacina.Items.Add("Kolicina (kg): " + niz[i].GetSetKolicina);
                StanjeMagacina.Items.Add("");
            }
        }

        /*Kreiranje događaja za treći dugmić Stanje u magacinu*/
        private void buttonStanjeUMagacinu_Click(object sender, EventArgs e)
        {
            StanjeMagacina.Items.Clear();/*Brisanje prethodnog sadržaja iz listBox kontrole*/
            ispis(nizk, ik);/*Ispis trenutnog stanja kafe*/
            ispis(nizse, ise); /*Ispis trenutnog stanja šećera*/
            ispis(nizso, iso); /*Ispis trenutnog stanja soli*/
            ispis(nizco, ico); /*Ispis trenutnog stanja čokolade*/
        }
    }
}



